<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   creationComplete="init()"
					   preinitialize="preinitializeHandler(event)"
					   >
	<s:layout>
		<s:VerticalLayout paddingBottom="20"
						  paddingLeft="20"
						  paddingRight="20"
						  paddingTop="20"
						  gap="10"/>
	</s:layout>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		
		global{
			modalTransparency: 0.5;
			modalTransparencyBlur: 0;
			modalTransparencyColor: #FFFFFF;
			modalTransparencyDuration: 0;
		}
		
		s|WindowedApplication{
			background-alpha:0;
			background-color:#d6d6d6;
		}
		
		s|Button{
			corner-radius:0;
			skinClass: ClassReference('myproject.skins.MyButtonSkin');
			backgroundGradientTopColor:#e5e5e5;
			backgroundGradientBottomColor:#c8c8c8;
			font-weight:bold;
		}
		
		s|Label{
			color:#444444;
			font-size:11px;
		}
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import jp.progression.commands.Func;
			import jp.progression.commands.Wait;
			import jp.progression.commands.lists.SerialList;
			
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import myproject.data.FileName;
			import myproject.data.FolderName;
			import myproject.ui.ProgressPanel;

			private static const ASYNC_RESUME_COUNT:Number = 10;

			private var _asyncCnt:int;

			private var _cmd:SerialList;

			[Bindable]
			private var _dir:File;
			private var _fileArr:Array;

			private var _progressPanel:ProgressPanel;

			/**
			 * アプリケーションを初期化します。
			 */
			protected function init():void
			{
				this.addEventListener(NativeDragEvent.NATIVE_DRAG_ENTER, onNativeDragEnter);
				this.addEventListener(NativeDragEvent.NATIVE_DRAG_DROP, onNativeDragDrop);
				nativeApplication.addEventListener(Event.EXITING, onExiting);

				_progressPanel = new ProgressPanel();
				_progressPanel.path = this;

				resumeSharedObject();
			}
			
			protected function preinitializeHandler(event:FlexEvent):void
			{
				var os:String = Capabilities.os.substr(0, 3);
				var fontFamily:String;
				switch (os)
				{
					case "Win": fontFamily = "ＭＳ Ｐゴシック"; break;
					case "Mac": fontFamily = "ヒラギノ角ゴ Pro W3"; break;
					case "Lin": fontFamily = "さざなみゴシック"; break;
				}
				if (Capabilities.os == "Windows Vista") fontFamily = "メイリオ";
				
				if (fontFamily != null)
				{
					var styleDeclaration:CSSStyleDeclaration = StyleManager.getStyleDeclaration("global");
					styleDeclaration.setStyle("fontFamily", fontFamily);
					StyleManager.setStyleDeclaration("global", styleDeclaration, true);
				}
			}

			/**
			 * ファイル検索前に準備を行います。
			 */
			protected function searchPreparation(selectedFile:File):void
			{
				if (!selectedFile && !selectedFile.isDirectory)
					return;

				_tiPath.text = selectedFile.nativePath;

				searchFiles();
			}

			protected function searchFiles():void
			{
				var self:* = this;

				// 非同期処理用コマンドの作成
				_cmd = new SerialList();
				_cmd.addCommand(
					// 初期化
					function():void{
						_fileArr = [];
						_fileArrCl.source = _fileArr;
						_fileNum = _fileArr.length;
						_asyncCnt = 0;
						PopUpManager.addPopUp(_progressPanel, self, true);
						PopUpManager.centerPopUp(_progressPanel);
					},
					// 検索開始
					new Func(searchCore, [_dir]),
					// 終了処理
					function():void{
						_fileArrCl.source = _fileArr;
						_fileNum = _fileArr.length;
						PopUpManager.removePopUp(_progressPanel);
					}
					);
				// コマンドの実行
				_cmd.execute();
			}

			/**
			 * フォルダリスティングのコア処理です。
			 */
			protected function searchCore(target:File):void
			{
				if (!target)
					return;

				if (target.isDirectory)
				{
					if (_cbSVN.selected && target.name == FolderName.DOT_SVN)
					{
						_fileArr.push(target);
					}
					else if (_cbDreamWeaver.selected && target.name == FolderName._NOTES)
					{
						_fileArr.push(target);
					}
					else
					{
						var files:Array = target.getDirectoryListing();
						for (var i:int = 0; i < files.length; i++)
						{
							var element:File = files[i] as File;

							// コマンドを追加(再帰処理)
							_cmd.insertCommand(
								new Func(searchCore, [element]),
								// ASYNC_RESUME_COUNT 回ごとに1回休憩する(フレームを進ませる)
								_asyncCnt++ % ASYNC_RESUME_COUNT == 0
								? new Wait(0.005)
								: null
								);
						}
					}
				}
				else
				{
					if (_cbDSStore.selected && target.name == FileName.DOT_DS_STORE)
					{
						_fileArr.push(target);
					}
					if (_cbThumb.selected && target.name == FileName.THUMBS_DB)
					{
						_fileArr.push(target);
					}
					if (_cbThumb.selected && target.name == FileName.DOT_BRIDGE_SORT)
					{
						_fileArr.push(target);
					}
				}
			}

			protected function onNativeDragEnter(e:NativeDragEvent):void
			{
				var data:Clipboard = e.clipboard;
				if (data.hasFormat(ClipboardFormats.FILE_LIST_FORMAT))
				{
					NativeDragManager.acceptDragDrop(this);
				}
			}

			protected function onNativeDragDrop(event:NativeDragEvent):void
			{
				// クリップボードからデータを取り出す
				var clipboard:Clipboard = event.clipboard;
				var list:Array = clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;

				searchPreparation(_dir = list[0]);
			}

			protected function onBrowseBtnClick():void
			{
				_dir = new File();
				_dir.addEventListener(Event.SELECT, onFileBrowseSelect, false, 0, true);
				_dir.browseForDirectory("フォルダを選択");
			}

			protected function onFileBrowseSelect(event:Event):void
			{
				searchPreparation(event.target as File);
			}

			protected function onDeleteClick(event:MouseEvent):void
			{
				Alert.show(
					"カスファイル " + _fileNum + " 項目を削除します。\n" +
					"この処理はキャンセルできませんが、\n" +
					"実行しますか？",
					"気をつけてね", 3, null, onAlertClose);
			}

			protected function onCheckBoxChange(event:Event):void
			{
				if (!_dir)
					return;

				searchFiles();
			}

			protected function onAlertClose(e:CloseEvent):void
			{
				if (e.detail == Alert.YES)
				{
					for (var i:int = 0; i < _fileArr.length; i++)
					{
						var element:File = _fileArr[i];
						if (element.isDirectory)
							element.deleteDirectory(true);
						else
							element.deleteFile();
					}

					searchFiles();
					Alert.show("カスを削除しました", "完了");
				}
			}

			protected function suspendSharedObject():void
			{
				var so:SharedObject = SharedObject.getLocal("config");
				so.data.config = {
						_cbThumb: _cbThumb.selected,
						_cbDSStore: _cbDSStore.selected,
						_cbSVN: _cbSVN.selected,
						_cbDreamWeaver: _cbDreamWeaver.selected,
						_cbBridge : _cbBridge.selected
					};
				so.flush();
			}

			protected function resumeSharedObject():void
			{
				var so:SharedObject = SharedObject.getLocal("config");
				if (so.data.config)
				{
					_cbThumb.selected = so.data.config._cbThumb;
					_cbDSStore.selected = so.data.config._cbDSStore;
					_cbSVN.selected = so.data.config._cbSVN;
					_cbDreamWeaver.selected = so.data.config._cbDreamWeaver;
					_cbBridge.selected = so.data.config._cbBridge;
				}
			}

			/**
			 * 非同期コマンドを中断します。
			 */
			public function interruptSearch():void
			{
				_cmd.interrupt();

				_fileArr = [];
				_fileArrCl.source = _fileArr;
				_fileNum = _fileArr.length;

				PopUpManager.removePopUp(_progressPanel);
			}

			private function onExiting(event:Event):void
			{
				suspendSharedObject();
			};
		]]>
	</fx:Script>

	<fx:Declarations>
		<!-- 非ビジュアルエレメント (サービス、値オブジェクトなど) をここに配置 -->
		<s:ArrayCollection id="_fileArrCl"/>
		<fx:uint id="_fileNum"/>
	</fx:Declarations>

	<s:Label text="カス削除くん"
			 fontSize="20"
			 fontWeight="bold"/>

	<s:HGroup verticalAlign="middle">
		<s:Button label="フォルダを選択"
				  click="onBrowseBtnClick()"
				  width="130"
				  />
		<s:Label text="もしくはフォルダをドラッグ＆ドロップしてください"/>
	</s:HGroup>

	<s:Label text="削除するファイル/フォルダ（OS関連）"/>
	<s:BorderContainer width="100%" skinClass="myproject.skins.MyBorderSkin">
		<s:layout>
			<s:VerticalLayout paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" />
		</s:layout>
		<s:Label text="OS 関連のカス"/>
		<s:HGroup>
			<s:CheckBox id="_cbThumb"
						label="Thumb.db"
						selected="true"
						change="onCheckBoxChange(event)"/>
			<s:CheckBox id="_cbDSStore"
						label=".DS_Store"
						selected="true"
						change="onCheckBoxChange(event)"/>
			<s:CheckBox id="_cbSVN"
						label=".svn フォルダ"
						selected="false"
						change="onCheckBoxChange(event)"/>
		</s:HGroup>
		<s:Label text="Adobe 関連のカス"/>
		<s:HGroup>
			<s:CheckBox id="_cbBridge"
						label=".BridgeSort"
						selected="false"
						change="onCheckBoxChange(event)"/>
			<s:CheckBox id="_cbDreamWeaver"
						label="_notes フォルダ"
						selected="false"
						change="onCheckBoxChange(event)"/>
		</s:HGroup>
	</s:BorderContainer>

	<s:Label text="選択したフォルダ"/>
	<s:TextInput id="_tiPath"
				 width="100%"
				 editable="false"/>

	<s:Label text="{'見つかったカスファイル (' + _fileNum + '項目)'}"/>
	
	<s:List id="_listFile"
			width="100%"
			height="100%"
			dataProvider="{_fileArrCl}"
			labelField="nativePath"/>

	<s:Button label="カスファイルを削除する"
			  click="onDeleteClick(event)"
			  enabled="{_fileNum > 0}"
			  width="100%"
			  height="30"/>

</s:WindowedApplication>
